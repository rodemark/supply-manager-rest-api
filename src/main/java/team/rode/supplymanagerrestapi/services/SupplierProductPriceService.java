package team.rode.supplymanagerrestapi.services;import jakarta.transaction.Transactional;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import team.rode.supplymanagerrestapi.DTO.request.SupplierProductPriceRequestDto;import team.rode.supplymanagerrestapi.DTO.response.SupplierProductPriceResponseDto;import team.rode.supplymanagerrestapi.exceptionHandling.exceptions.DuplicateResourceException;import team.rode.supplymanagerrestapi.models.Product;import team.rode.supplymanagerrestapi.models.Supplier;import team.rode.supplymanagerrestapi.models.SupplierProductPrice;import team.rode.supplymanagerrestapi.repositories.SupplierProductPriceRepository;import team.rode.supplymanagerrestapi.util.DtoConverter;import java.util.List;@Service@Slf4jpublic class SupplierProductPriceService {    private final SupplierProductPriceRepository supplierProductPriceRepository;    private final DtoConverter dtoConverter;    private final EntityRetrievalService entityRetrievalService;    @Autowired    public SupplierProductPriceService(SupplierProductPriceRepository supplierProductPriceRepository,                                       DtoConverter dtoConverter,                                       EntityRetrievalService entityRetrievalService) {        this.supplierProductPriceRepository = supplierProductPriceRepository;        this.dtoConverter = dtoConverter;        this.entityRetrievalService = entityRetrievalService;    }    public List<SupplierProductPriceResponseDto> getSupplierProductPrices() {        List<SupplierProductPrice> prices = supplierProductPriceRepository.findAll();        return prices.stream()                .map(price -> dtoConverter.convertToDto(price, SupplierProductPriceResponseDto.class))                .toList();    }    @Transactional    public SupplierProductPriceResponseDto addSupplierProductPrice(SupplierProductPriceRequestDto dto) {        if (supplierProductPriceRepository.existsSimilarSupplierProductPrice(dto.getSupplierId(), dto.getProductId(),                dto.getStartDate(), dto.getEndDate(), dto.getPrice())) {            log.error("A SupplierProductPrice with such data already exists");            throw new DuplicateResourceException("A SupplierProductPrice with such data already exists");        }        SupplierProductPrice supplierProductPrice = new SupplierProductPrice();        Supplier supplier = entityRetrievalService.getSupplierById(dto.getSupplierId());        Product product = entityRetrievalService.getProductById(dto.getProductId());        supplierProductPrice.setPrice(dto.getPrice());        supplierProductPrice.setSupplier(supplier);        supplierProductPrice.setProduct(product);        supplierProductPrice.setStartDate(dto.getStartDate());        supplierProductPrice.setEndDate(dto.getEndDate());        supplierProductPrice = supplierProductPriceRepository.save(supplierProductPrice);        log.info("SupplierProductPrice with id {} added ", supplierProductPrice.getId());        return dtoConverter.convertToDto(supplierProductPrice, SupplierProductPriceResponseDto.class);    }    @Transactional    public void deleteSupplierProductPrice(Long id) {        SupplierProductPrice supplierProductPrice = entityRetrievalService.getSupplierProductPriceById(id);        supplierProductPriceRepository.delete(supplierProductPrice);        log.info("SupplierProductPrice with id {} deleted ", id);    }    @Transactional    public SupplierProductPriceResponseDto editSupplierProductPrice(SupplierProductPriceRequestDto dto, Long id) {        SupplierProductPrice supplierProductPrice = entityRetrievalService.getSupplierProductPriceById(id);        Supplier supplier = entityRetrievalService.getSupplierById(dto.getSupplierId());        Product product = entityRetrievalService.getProductById(dto.getProductId());        supplierProductPrice.setSupplier(supplier);        supplierProductPrice.setProduct(product);        supplierProductPrice.setStartDate(dto.getStartDate());        supplierProductPrice.setEndDate(dto.getEndDate());        supplierProductPrice.setPrice(dto.getPrice());        supplierProductPrice = supplierProductPriceRepository.save(supplierProductPrice);        return dtoConverter.convertToDto(supplierProductPrice, SupplierProductPriceResponseDto.class);    }}